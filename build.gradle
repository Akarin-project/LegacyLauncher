apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    maven {
        url "https://libraries.minecraft.net/"
    }
    mavenCentral()
}

group = 'net.minecraft'
archivesBaseName = 'launchwrapper'
version = '1.13-mikroskeem'
sourceCompatibility = 1.8

dependencies {
    compile 'net.sf.jopt-simple:jopt-simple:4.9'
    compile 'org.ow2.asm:asm-debug-all:5.2'
    compile 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

def repoDir = new File(projectDir, "repo")
repoDir.mkdirs()

/* Utility to get repository credentials */
String[] getMavenCreds(String repoName) {
    def mavenSettings = new XmlParser()
            .parseText new File(System.getProperty("user.home"), ".m2/settings.xml").getText()

    String[] authData = new String[2]

    mavenSettings.servers.forEach { serverElemNode ->
        def serverElem = serverElemNode.value()
        if(serverElem.id[0].value()[0] == repoName){
            authData[0] = serverElem.username[0].value()[0]
            authData[1] = serverElem.password[0].value()[0]
        }
    }

    return (authData[0] == null || authData[1] == null)? null : authData
}

uploadArchives {
    repositories {
        mavenDeployer {
            def authData = getMavenCreds "mikroskeem-repo"
            if(authData != null) {
                repository(url: "https://repo.wut.ee/repository/mikroskeem-repo") {
                    authentication(userName: authData[0], password: authData[1])
                }
            } else {
                repository(url: "file://" + repoDir.absolutePath)
            }

            pom.project {
                name "LegacyLauncher"
                description 'Minecraft LegacyLauncher - mikroskeem\'s fork'
                url 'http://github.com/mikroskeem/LegacyLauncher'
            }
        }
    }

    doLast {
        // Purge all annoying files that arent needed
        repoDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.(xml(?:\.sha1)?|md5)$/) {
            it.delete()
        }
    }
}

clean << {
    repoDir.deleteDir()
}
